type retryRequestPipeline struct {
	checkRetryCountExceeded func(uint64) (bool, error)
	lastAttemptNumber       func(uuid.UUID) (uint64, error)
	insertAttempt           func(Attempt) (uint64, error)
	markRequestAsAborted    func(AbortedRequest) error
	markRequestAsCompleted  func(CompletedRequest) error
}

func makeStoragePipeline(
	ctx context.Context,
	storage Storage,
) retryRequestPipeline {
	pipeline := retryRequestPipeline{}

	pipeline.lastAttemptNumber = func(requestID uuid.UUID) (uint64, error) {
		return storage.LastRequestAttemptNumber(ctx, requestID)
	}

	pipeline.insertAttempt = func(attempt Attempt) (uint64, error) {
		return storage.InsertRequestAttempt(ctx, attempt)
	}

	pipeline.markRequestAsAborted = func(abortedRequest AbortedRequest) error {
		return storage.MarkRequestAsAborted(ctx, abortedRequest)
	}

	pipeline.markRequestAsCompleted = func(completedRequest CompletedRequest) error {
		return storage.MarkRequestAsCompleted(ctx, completedRequest)
	}

	return pipeline
}

func wrapPipelineWithLogger(pipeline retryRequestPipeline, log *slog.Logger) retryRequestPipeline {

}

func checkRetryCountExceeded(options retryOptions) func(uint64) error {
	return func(attemptNumber uint64) error {
		if retryCountExceeded(options, attemptNumber) {
			return retry.ErrRetryCountExceeded
		}

		return nil
	}
}

func (r retryRequestPipeline) exec(policy retry.Policy, rf retry.Func, requestID uuid.UUID) error {
	lastAttemptNumber, err := r.lastAttemptNumber(requestID)
	if err != nil {
		return err
	}

	ok, err := r.checkRetryCountExceeded(lastAttemptNumber)
	if err != nil {
		return err
	}

	if !ok {
		return r.markRequestAsAborted(
			AbortedRequest{
				RequestID: requestID,
				Err:       retry.ErrRetryCountExceeded,
				AbortedAt: time.Now().UTC(),
			},
		)
	}

	retryErr := policy.Retry(
		func() retry.Result {
			result := rf()

			attemptNumber, err := r.insertAttempt(
				Attempt{
					RequestID: requestID,
					Err:       result.Err(),
					CreatedAt: time.Now().UTC(),
				},
			)
			if err != nil {
				return result
			}

			ok, err := r.checkRetryCountExceeded(attemptNumber)
			if err != nil {
				return result
			}

			if !ok {
				return retry.Abort(retry.ErrRetryCountExceeded)
			}

			return result
		},
	)
	switch retryErr {
	case nil:
		return r.markRequestAsCompleted(
			CompletedRequest{
				RequestID:   requestID,
				CompletedAt: time.Now().UTC(),
			},
		)
	default:
		return r.markRequestAsAborted(
			AbortedRequest{
				RequestID: requestID,
				AbortedAt: time.Now().UTC(),
				Err:       retryErr,
			},
		)
	}
}
